# En lugar de application.properties, cargamos bootstrap.properties que se carga antes
# para que pida lo primero el resto de properties de configuración.

server.port=8082
################ CLIENTE DE SPRING CLOUD CONFIG #######################
# Nombre de la aplicación que será también el que se empleará en la busqueda
# en el servidor de configuración de las properties de este servicio.
spring.application.name=servicioprovincias
# Perfil a solicitar en el servidor de configuración
spring.profiles.active=default
# url del servidor de configuración
spring.cloud.config.uri=http://localhost:8888
################ CLIENTE DE EUREKA #######################
# Es preferible registrarse con la IP porque hay casos como el de Docker que no tiene DNS
eureka.instance.prefer-ip-address=true
# Indica que ha de registrarse en un servidor eureka
eureka.client.register-with-eureka=true
# Guarda una copia en local de los mapeos de los servicios en Eureka
# por si tiene que hacer otra petición y Eureka no está disponible.
# Se actualizan los datos desde Eureka cada 30 segundos.
eureka.client.fetch-registry=true
# Lista separada por comas de todos los servidores Eureka empleados.
eureka.client.service-url.default-zone=http://localhost:8761/eureka

# ------------- ACTUATOR --------------------------
endpoints.sensitive= false
# ------------- SPRING BOOT ADMIN --------------------------
spring.boot.admin.url=http://localhost:9090